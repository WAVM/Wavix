;; Tests for the extract_lane and replace_lane group instructions


(module 
  (func (export "i8x16_extract_lane_s-first") (param v128) (result i32)
    (i8x16.extract_lane_s 0 (local.get 0)))
  (func (export "i8x16_extract_lane_s-last") (param v128) (result i32)
    (i8x16.extract_lane_s 15 (local.get 0)))
  (func (export "i8x16_extract_lane_u-first") (param v128) (result i32)
    (i8x16.extract_lane_u 0 (local.get 0)))
  (func (export "i8x16_extract_lane_u-last") (param v128) (result i32)
    (i8x16.extract_lane_u 15 (local.get 0)))
  (func (export "i16x8_extract_lane_s-first") (param v128) (result i32)
    (i16x8.extract_lane_s 0 (local.get 0)))
  (func (export "i16x8_extract_lane_s-last") (param v128) (result i32)
    (i16x8.extract_lane_s 7 (local.get 0)))
  (func (export "i16x8_extract_lane_u-first") (param v128) (result i32)
    (i16x8.extract_lane_u 0 (local.get 0)))
  (func (export "i16x8_extract_lane_u-last") (param v128) (result i32)
    (i16x8.extract_lane_u 7 (local.get 0)))
  (func (export "i32x4_extract_lane-first") (param v128) (result i32)
    (i32x4.extract_lane 0 (local.get 0)))
  (func (export "i32x4_extract_lane-last") (param v128) (result i32)
    (i32x4.extract_lane 3 (local.get 0)))
  (func (export "f32x4_extract_lane-first") (param v128) (result f32)
    (f32x4.extract_lane 0 (local.get 0)))
  (func (export "f32x4_extract_lane-last") (param v128) (result f32)
    (f32x4.extract_lane 3 (local.get 0)))
  (func (export "i8x16_replace_lane-first") (param v128 i32) (result v128)
    (i8x16.replace_lane 0 (local.get 0) (local.get 1)))
  (func (export "i8x16_replace_lane-last") (param v128 i32) (result v128)
    (i8x16.replace_lane 15 (local.get 0) (local.get 1)))
  (func (export "i16x8_replace_lane-first") (param v128 i32) (result v128)
    (i16x8.replace_lane 0 (local.get 0) (local.get 1)))
  (func (export "i16x8_replace_lane-last") (param v128 i32) (result v128)
    (i16x8.replace_lane 7 (local.get 0) (local.get 1)))
  (func (export "i32x4_replace_lane-first") (param v128 i32) (result v128)
    (i32x4.replace_lane 0 (local.get 0) (local.get 1)))
  (func (export "i32x4_replace_lane-last") (param v128 i32) (result v128)
    (i32x4.replace_lane 3 (local.get 0) (local.get 1)))
  (func (export "f32x4_replace_lane-first") (param v128 f32) (result v128)
    (f32x4.replace_lane 0 (local.get 0) (local.get 1)))
  (func (export "f32x4_replace_lane-last") (param v128 f32) (result v128)
    (f32x4.replace_lane 3 (local.get 0) (local.get 1)))
)

(assert_return (invoke "i8x16_extract_lane_s-first" (v128.const i8x16 127 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (i32.const 127))
(assert_return (invoke "i8x16_extract_lane_s-first" (v128.const i8x16 0x7f 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (i32.const 127))
(assert_return (invoke "i8x16_extract_lane_s-first" (v128.const i8x16 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (i32.const -1))
(assert_return (invoke "i8x16_extract_lane_s-first" (v128.const i8x16 0xff 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (i32.const -1))
(assert_return (invoke "i8x16_extract_lane_u-first" (v128.const i8x16 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (i32.const 255))
(assert_return (invoke "i8x16_extract_lane_u-first" (v128.const i8x16 0xff 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (i32.const 255))
(assert_return (invoke "i8x16_extract_lane_s-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -128)) (i32.const -128))
(assert_return (invoke "i8x16_extract_lane_s-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x80)) (i32.const -128))
(assert_return (invoke "i8x16_extract_lane_u-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1)) (i32.const 255))
(assert_return (invoke "i8x16_extract_lane_u-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0xff)) (i32.const 255))
(assert_return (invoke "i8x16_extract_lane_u-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -128)) (i32.const 128))
(assert_return (invoke "i8x16_extract_lane_u-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x80)) (i32.const 128))
;; Use other v128 interpretations as arguments
(assert_return (invoke "i8x16_extract_lane_s-last" (v128.const i16x8 0 0 0 0 0 0 0 0x8000)) (i32.const -128))
(assert_return (invoke "i8x16_extract_lane_s-last" (v128.const i32x4 0 0 0 0x7f000000)) (i32.const 127))
(assert_return (invoke "i8x16_extract_lane_s-last" (v128.const f32x4 0 0 0 1.0)) (i32.const 63))
(assert_return (invoke "i8x16_extract_lane_u-last" (v128.const i16x8 0 0 0 0 0 0 0 0xff00)) (i32.const 255))
(assert_return (invoke "i8x16_extract_lane_u-last" (v128.const i32x4 0 0 0 0xff000000)) (i32.const 255))
(assert_return (invoke "i8x16_extract_lane_u-last" (v128.const f32x4 0 0 0 2.0)) (i32.const 64))

(assert_return (invoke "i16x8_extract_lane_s-first" (v128.const i16x8 32767 0 0 0 0 0 0 0)) (i32.const 32767))
(assert_return (invoke "i16x8_extract_lane_s-first" (v128.const i16x8 0x7fff 0 0 0 0 0 0 0)) (i32.const 32767))
(assert_return (invoke "i16x8_extract_lane_s-first" (v128.const i16x8 65535 0 0 0 0 0 0 0)) (i32.const -1))
(assert_return (invoke "i16x8_extract_lane_s-first" (v128.const i16x8 0xffff 0 0 0 0 0 0 0)) (i32.const -1))
(assert_return (invoke "i16x8_extract_lane_u-first" (v128.const i16x8 65535 0 0 0 0 0 0 0)) (i32.const 65535))
(assert_return (invoke "i16x8_extract_lane_u-first" (v128.const i16x8 0xffff 0 0 0 0 0 0 0)) (i32.const 65535))
(assert_return (invoke "i16x8_extract_lane_s-last" (v128.const i16x8 0 0 0 0 0 0 0 -32768)) (i32.const -32768))
(assert_return (invoke "i16x8_extract_lane_s-last" (v128.const i16x8 0 0 0 0 0 0 0 0x8000)) (i32.const -32768))
(assert_return (invoke "i16x8_extract_lane_u-last" (v128.const i16x8 0 0 0 0 0 0 0 -1)) (i32.const 65535))
(assert_return (invoke "i16x8_extract_lane_u-last" (v128.const i16x8 0 0 0 0 0 0 0 0xffff)) (i32.const 65535))
(assert_return (invoke "i16x8_extract_lane_u-last" (v128.const i16x8 0 0 0 0 0 0 0 -32768)) (i32.const 32768))
(assert_return (invoke "i16x8_extract_lane_u-last" (v128.const i16x8 0 0 0 0 0 0 0 0x8000)) (i32.const 32768))
;; Use other v128 interpretations as arguments
(assert_return (invoke "i16x8_extract_lane_s-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -128)) (i32.const -32768))
(assert_return (invoke "i16x8_extract_lane_s-last" (v128.const i32x4 0 0 0 0x7fff0000)) (i32.const 32767))
(assert_return (invoke "i16x8_extract_lane_s-last" (v128.const f32x4 0 0 0 3.0)) (i32.const 0x4040))
(assert_return (invoke "i16x8_extract_lane_u-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0xff 0xff)) (i32.const 65535))
(assert_return (invoke "i16x8_extract_lane_u-last" (v128.const i32x4 0 0 0 0xffffffff)) (i32.const 65535))
(assert_return (invoke "i16x8_extract_lane_u-last" (v128.const f32x4 0 0 0 4.0)) (i32.const 0x4080))

(assert_return (invoke "i32x4_extract_lane-first" (v128.const i32x4 2147483647 0 0 0)) (i32.const 2147483647))
(assert_return (invoke "i32x4_extract_lane-first" (v128.const i32x4 0x7fffffff 0 0 0)) (i32.const 2147483647))
(assert_return (invoke "i32x4_extract_lane-first" (v128.const i32x4 4294967295 0 0 0)) (i32.const -1))
(assert_return (invoke "i32x4_extract_lane-first" (v128.const i32x4 0xffffffff 0 0 0)) (i32.const -1))
(assert_return (invoke "i32x4_extract_lane-last" (v128.const i32x4 0 0 0 -2147483648)) (i32.const -2147483648))
(assert_return (invoke "i32x4_extract_lane-last" (v128.const i32x4 0 0 0 0x80000000)) (i32.const -2147483648))
(assert_return (invoke "i32x4_extract_lane-last" (v128.const i32x4 0 0 0 -1)) (i32.const -1))
(assert_return (invoke "i32x4_extract_lane-last" (v128.const i32x4 0 0 0 0xffffffff)) (i32.const -1))
;; Use other v128 interpretations as arguments
(assert_return (invoke "i32x4_extract_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0xff 0xff 0xff 0x7f)) (i32.const 2147483647))
(assert_return (invoke "i32x4_extract_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0x8000)) (i32.const -2147483648))
(assert_return (invoke "i32x4_extract_lane-last" (v128.const f32x4 0 0 0 5.0)) (i32.const 0x40a00000))

(assert_return (invoke "f32x4_extract_lane-first" (v128.const f32x4 -5.0 0.0 0.0 0.0)) (f32.const -5.0))
(assert_return (invoke "f32x4_extract_lane-first" (v128.const f32x4 1e38 0.0 0.0 0.0)) (f32.const 1e38))
(assert_return (invoke "f32x4_extract_lane-first" (v128.const f32x4 0x1.fffffep127 0.0 0.0 0.0)) (f32.const 0x1.fffffep127))
(assert_return (invoke "f32x4_extract_lane-first" (v128.const f32x4 0x1p127 0.0 0.0 0.0)) (f32.const 0x1p127))
(assert_return (invoke "f32x4_extract_lane-first" (v128.const f32x4 inf 0.0 0.0 0.0)) (f32.const inf))
(assert_return (invoke "f32x4_extract_lane-first" (v128.const f32x4 nan inf 0.0 0.0)) (f32.const nan))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const f32x4 0.0 0.0 0.0 -1e38)) (f32.const -1e38))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const f32x4 0.0 0.0 0.0 -0x1.fffffep127)) (f32.const -0x1.fffffep127))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const f32x4 0.0 0.0 0.0 -0x1p127)) (f32.const -0x1p127))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const f32x4 0.0 0.0 0.0 -inf)) (f32.const -inf))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const f32x4 0.0 0.0 -inf nan)) (f32.const nan))
;; Use other v128 interpretations as arguments
(assert_return (invoke "f32x4_extract_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (f32.const 0))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0x80)) (f32.const -0))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0x3f80)) (f32.const 1.0))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0xbf80)) (f32.const -1.0))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const i16x8 0 0 0 0 0 0 0xffff 0x7f7f)) (f32.const 0x1.fffffep+127))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0x80)) (f32.const 0x1.000000p-126))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const i16x8 0 0 0 0 0 0 0xffff 0x7f)) (f32.const 0x1.fffffcp-127))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const i16x8 0 0 0 0 0 0 1 0)) (f32.const 0x0.000004p-127))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const i32x4 0 0 0 0x7f800000)) (f32.const inf))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const i32x4 0 0 0 0xff800000)) (f32.const -inf))
(assert_return (invoke "f32x4_extract_lane-last" (v128.const i32x4 0 0 0 0x7fc00000)) (f32.const nan))

(assert_return (invoke "i8x16_replace_lane-first" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 127)) (v128.const i8x16 127 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "i8x16_replace_lane-first" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 128)) (v128.const i8x16 -128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "i8x16_replace_lane-first" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 255)) (v128.const i8x16 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "i8x16_replace_lane-first" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 256)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "i8x16_replace_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const -128)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -128))
(assert_return (invoke "i8x16_replace_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const -129)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127))
(assert_return (invoke "i8x16_replace_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 32767)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0xff))
(assert_return (invoke "i8x16_replace_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const -32768)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
;; Use other v128 interpretations as arguments
(assert_return (invoke "i8x16_replace_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 127)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127))
(assert_return (invoke "i8x16_replace_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 0x80)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -128))
(assert_return (invoke "i8x16_replace_lane-last" (v128.const i32x4 0 0 0 0) (i32.const 127)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127))
(assert_return (invoke "i8x16_replace_lane-last" (v128.const i32x4 0 0 0 0) (i32.const 0x80)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -128))
(assert_return (invoke "i8x16_replace_lane-last" (v128.const f32x4 0 0 0 0) (i32.const 127)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127))
(assert_return (invoke "i8x16_replace_lane-last" (v128.const f32x4 0 0 0 0) (i32.const 0x80)) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -128))

(assert_return (invoke "i16x8_replace_lane-first" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 32767)) (v128.const i16x8 32767 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8_replace_lane-first" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 32768)) (v128.const i16x8 -32768 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8_replace_lane-first" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 65535)) (v128.const i16x8 -1 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8_replace_lane-first" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 65536)) (v128.const i16x8 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8_replace_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const -32768)) (v128.const i16x8 0 0 0 0 0 0 0 -32768))
(assert_return (invoke "i16x8_replace_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const -32769)) (v128.const i16x8 0 0 0 0 0 0 0 32767))
(assert_return (invoke "i16x8_replace_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 0x7fffffff)) (v128.const i16x8 0 0 0 0 0 0 0 0xffff))
(assert_return (invoke "i16x8_replace_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 0x80000000)) (v128.const i16x8 0 0 0 0 0 0 0 0))
;; Use other v128 interpretations as arguments
(assert_return (invoke "i16x8_replace_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 32767)) (v128.const i16x8 0 0 0 0 0 0 0 32767))
(assert_return (invoke "i16x8_replace_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 0x8000)) (v128.const i16x8 0 0 0 0 0 0 0 -32768))
(assert_return (invoke "i16x8_replace_lane-last" (v128.const i32x4 0 0 0 0) (i32.const 32767)) (v128.const i16x8 0 0 0 0 0 0 0 32767))
(assert_return (invoke "i16x8_replace_lane-last" (v128.const i32x4 0 0 0 0) (i32.const 0x8000)) (v128.const i16x8 0 0 0 0 0 0 0 -32768))
(assert_return (invoke "i16x8_replace_lane-last" (v128.const f32x4 0 0 0 0) (i32.const 32767)) (v128.const i16x8 0 0 0 0 0 0 0 32767))
(assert_return (invoke "i16x8_replace_lane-last" (v128.const f32x4 0 0 0 0) (i32.const 0x8000)) (v128.const i16x8 0 0 0 0 0 0 0 -32768))

(assert_return (invoke "i32x4_replace_lane-first" (v128.const i32x4 0 0 0 0) (i32.const 2147483647)) (v128.const i32x4 2147483647 0 0 0))
(assert_return (invoke "i32x4_replace_lane-first" (v128.const i32x4 0 0 0 0) (i32.const 4294967295)) (v128.const i32x4 -1 0 0 0))
(assert_return (invoke "i32x4_replace_lane-last" (v128.const i32x4 0 0 0 0) (i32.const 2147483648)) (v128.const i32x4 0 0 0 2147483648))
(assert_return (invoke "i32x4_replace_lane-last" (v128.const i32x4 0 0 0 0) (i32.const -2147483648)) (v128.const i32x4 0 0 0 -2147483648))
;; Use other v128 interpretations as arguments
(assert_return (invoke "i32x4_replace_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 2147483647)) (v128.const i32x4 0 0 0 2147483647))
(assert_return (invoke "i32x4_replace_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 2147483647)) (v128.const i32x4 0 0 0 2147483647))
(assert_return (invoke "i32x4_replace_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 2147483647)) (v128.const i32x4 0 0 0 2147483647))
(assert_return (invoke "i32x4_replace_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 0x80000000)) (v128.const i32x4 0 0 0 -2147483648))
(assert_return (invoke "i32x4_replace_lane-last" (v128.const f32x4 0 0 0 0) (i32.const 2147483647)) (v128.const i32x4 0 0 0 2147483647))
(assert_return (invoke "i32x4_replace_lane-last" (v128.const f32x4 0 0 0 0) (i32.const 0x80000000)) (v128.const i32x4 0 0 0 -2147483648))

(assert_return (invoke "f32x4_replace_lane-first" (v128.const f32x4 0.0 0.0 0.0 0.0) (f32.const 53.0)) (v128.const f32x4 53.0 0.0 0.0 0.0))
(assert_return (invoke "f32x4_replace_lane-first" (v128.const i32x4 0 0 0 0 ) (f32.const 53.0)) (v128.const f32x4 53.0 0.0 0.0 0.0))
(assert_return (invoke "f32x4_replace_lane-first" (v128.const f32x4 0.0 0.0 0.0 0.0) (f32.const nan)) (v128.const f32x4 nan 0.0 0.0 0.0))
(assert_return (invoke "f32x4_replace_lane-first" (v128.const f32x4 0.0 0.0 0.0 0.0) (f32.const inf)) (v128.const f32x4 inf 0.0 0.0 0.0))
(assert_return (invoke "f32x4_replace_lane-first" (v128.const f32x4 nan 0.0 0.0 0.0) (f32.const 3.14)) (v128.const f32x4 3.14 0.0 0.0 0.0))
(assert_return (invoke "f32x4_replace_lane-first" (v128.const f32x4 inf 0.0 0.0 0.0) (f32.const 1e38)) (v128.const f32x4 1e38 0.0 0.0 0.0))
(assert_return (invoke "f32x4_replace_lane-first" (v128.const f32x4 inf 0.0 0.0 0.0) (f32.const 0x1.fffffep127)) (v128.const f32x4 0x1.fffffep127 0.0 0.0 0.0))
(assert_return (invoke "f32x4_replace_lane-first" (v128.const f32x4 inf 0.0 0.0 0.0) (f32.const 0x1p127)) (v128.const f32x4 0x1p127 0.0 0.0 0.0))
(assert_return (invoke "f32x4_replace_lane-last" (v128.const f32x4 0.0 0.0 0.0 0.0) (f32.const -53.0)) (v128.const f32x4 0.0 0.0 0.0 -53.0))
(assert_return (invoke "f32x4_replace_lane-last" (v128.const i32x4 0 0 0 0) (f32.const -53.0)) (v128.const f32x4 0.0 0.0 0.0 -53.0))
(assert_return (invoke "f32x4_replace_lane-last" (v128.const f32x4 0.0 0.0 0.0 0.0) (f32.const nan)) (v128.const f32x4 0.0 0.0 0.0 nan))
(assert_return (invoke "f32x4_replace_lane-last" (v128.const f32x4 0.0 0.0 0.0 0.0) (f32.const -inf)) (v128.const f32x4 0.0 0.0 0.0 -inf))
(assert_return (invoke "f32x4_replace_lane-last" (v128.const f32x4 0.0 0.0 0.0 nan) (f32.const 3.14)) (v128.const f32x4 0.0 0.0 0.0 3.14))
(assert_return (invoke "f32x4_replace_lane-last" (v128.const f32x4 0.0 0.0 0.0 -inf) (f32.const -1e38)) (v128.const f32x4 0.0 0.0 0.0 -1e38))
(assert_return (invoke "f32x4_replace_lane-last" (v128.const f32x4 0.0 0.0 0.0 -inf) (f32.const -0x1.fffffep127)) (v128.const f32x4 0.0 0.0 0.0 -0x1.fffffep127))
(assert_return (invoke "f32x4_replace_lane-last" (v128.const f32x4 0.0 0.0 0.0 -inf) (f32.const -0x1p127)) (v128.const f32x4 0.0 0.0 0.0 -0x1p127))
;; Use other v128 interpretations as arguments
(assert_return (invoke "f32x4_replace_lane-last" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (f32.const 1.0)) (v128.const f32x4 0 0 0 1.0))
(assert_return (invoke "f32x4_replace_lane-last" (v128.const i16x8 0 0 0 0 0 0 0 0) (f32.const 1.0)) (v128.const f32x4 0 0 0 1.0))
(assert_return (invoke "f32x4_replace_lane-last" (v128.const f32x4 0 0 0 0) (f32.const 1.0)) (v128.const f32x4 0 0 0 1.0))


;; Invalid lane index value

(assert_invalid (module (func (result i32) (i8x16.extract_lane_s -1 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (i8x16.extract_lane_s 16 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (i8x16.extract_lane_u -1 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (i8x16.extract_lane_u 16 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (i16x8.extract_lane_s -1 (v128.const i16x8 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (i16x8.extract_lane_s 8 (v128.const i16x8 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (i16x8.extract_lane_u -1 (v128.const i16x8 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (i16x8.extract_lane_u 8 (v128.const i16x8 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (i32x4.extract_lane -1 (v128.const i32x4 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (i32x4.extract_lane 4 (v128.const i32x4 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result f32) (f32x4.extract_lane -1 (v128.const f32x4 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result f32) (f32x4.extract_lane 4 (v128.const f32x4 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result v128) (i8x16.replace_lane -1 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 1)))) "invalid lane index")
(assert_invalid (module (func (result v128) (i8x16.replace_lane 16 (v128.const ii8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 1)))) "invalid lane index")
(assert_invalid (module (func (result v128) (i16x8.replace_lane -1 (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 1)))) "invalid lane index")
(assert_invalid (module (func (result v128) (i16x8.replace_lane 8 (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 1)))) "invalid lane index")
(assert_invalid (module (func (result v128) (i32x4.replace_lane -1 (v128.const i32x4 0 0 0 0) (i32.const 1)))) "invalid lane index")
(assert_invalid (module (func (result v128) (i32x4.replace_lane 4 (v128.const i32x4 0 0 0 0) (i32.const 1)))) "invalid lane index")
(assert_invalid (module (func (result v128) (f32x4.replace_lane -1 (v128.const f32x4 0 0 0 0) (i32.const 1)))) "invalid lane index")
(assert_invalid (module (func (result v128) (f32x4.replace_lane 4 (v128.const f32x4 0 0 0 0) (i32.const 1)))) "invalid lane index")

;; Lane index is determined by the instruction's interpretation only.

(assert_invalid (module (func (result i32) (i16x8.extract_lane_s 8 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (i16x8.extract_lane_u 8 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (i32x4.extract_lane 4 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result i32) (f32x4.extract_lane 4 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))) "invalid lane index")
(assert_invalid (module (func (result v128) (f16x8.replace_lane 4 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 1)))) "invalid lane index")
(assert_invalid (module (func (result v128) (i32x4.replace_lane 4 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 1)))) "invalid lane index")
(assert_invalid (module (func (result v128) (f32x4.replace_lane 4 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 1)))) "invalid lane index")


;; Invalid parameters: required v128 but pass other types

(assert_invalid (module (func (result i32) (i8x16.extract_lane_s 0 (i32.const 0)))) "type mismatch")
(assert_invalid (module (func (result i32) (i8x16.extract_lane_u 0 (i64.const 0)))) "type mismatch")
(assert_invalid (module (func (result i32) (i8x16.extract_lane_s 0 (f32.const 0.0)))) "type mismatch")
(assert_invalid (module (func (result i32) (i8x16.extract_lane_u 0 (f64.const 0.0)))) "type mismatch")
(assert_invalid (module (func (result i32) (i32x4.extract_lane 0 (i32.const 0)))) "type mismatch")
(assert_invalid (module (func (result f32) (f32x4.extract_lane 0 (f32.const 0.0)))) "type mismatch")
(assert_invalid (module (func (result v128) (i8x16.replace_lane 0 (i32.const 0) (i32.const 1)))) "type mismatch")
(assert_invalid (module (func (result v128) (i16x8.replace_lane 0 (i64.const 0) (i32.const 1)))) "type mismatch")
(assert_invalid (module (func (result v128) (i32x4.replace_lane 0 (i32.const 0) (i32.const 1)))) "type mismatch")
(assert_invalid (module (func (result v128) (f32x4.replace_lane 0 (f32.const 0.0) (i32.const 1)))) "type mismatch")

;; Invalid type for the replaced value

(assert_invalid (module (func (result v128) (i8x16.replace_lane 0 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (f32.const 1.0)))) "type mismatch")
(assert_invalid (module (func (result v128) (i16x8.replace_lane 0 (v128.const i16x8 0 0 0 0 0 0 0 0) (f64.const 1.0)))) "type mismatch")
(assert_invalid (module (func (result v128) (i32x4.replace_lane 0 (v128.const i32x4 0 0 0 0) (f32.const 1.0)))) "type mismatch")
(assert_invalid (module (func (result v128) (f32x4.replace_lane 0 (v128.const f32x4 0 0 0 0) (i32.const 1)))) "type mismatch")


;; Possible wrong instruction names that'd be used

(assert_malformed (module quote "(func (result i32) (i8x16.extract_lane 0 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))") "unknown operator")
(assert_malformed (module quote "(func (result i32) (i16x8.extract_lane 0 (v128.const i16x8 0 0 0 0 0 0 0 0)))") "unknown operator")
(assert_malformed (module quote "(func (result i32) (i32x4.extract_lane_s 0 (v128.const i32x4 0 0 0 0)))") "unknown operator")
(assert_malformed (module quote "(func (result i32) (i32x4.extract_lane_u 0 (v128.const i32x4 0 0 0 0)))") "unknown operator")


;; Malformed lane index

;; Pass params as the lane index

(assert_malformed (module quote "(func (param i32) (result i32) (i8x16.extract_lane_s (local.get 0) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (param i32) (result i32) (i8x16.extract_lane_u (local.get 0) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (param i32) (result i32) (i16x8.extract_lane_s (local.get 0) (v128.const i16x8 0 0 0 0 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (param i32) (result i32) (i16x8.extract_lane_u (local.get 0) (v128.const i16x8 0 0 0 0 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (param i32) (result i32) (i32x4.extract_lane (local.get 0) (v128.const i32x4 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (param i32) (result i32) (f32x4.extract_lane (local.get 0) (v128.const f32x4 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (param i32) (result v128) (i8x16.replace_lane (local.get 0) (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 1)))") "expected i8 literal")
(assert_malformed (module quote "(func (param i32) (result v128) (i16x8.replace_lane (local.get 0) (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 1)))") "expected i8 literal")
(assert_malformed (module quote "(func (param i32) (result v128) (i32x4.replace_lane (local.get 0) (v128.const i32x4 0 0 0 0) (i32.const 1)))") "expected i8 literal")
(assert_malformed (module quote "(func (param i32) (result v128) (f32x4.replace_lane (local.get 0) (v128.const f32x4 0 0 0 0) (f32.const 1.0)))") "expected i8 literal")

;; Pass non-literal as the lane index

(assert_malformed (module quote "(func (result i32) (i8x16.extract_lane_s 1.5 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (result i32) (i8x16.extract_lane_u nan (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (result i32) (i16x8.extract_lane_s inf (v128.const i16x8 0 0 0 0 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (result i32) (i16x8.extract_lane_u -inf (v128.const i16x8 0 0 0 0 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (result i32) (i32x4.extract_lane nan (v128.const i32x4 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (result i32) (f32x4.extract_lane nan (v128.const f32x4 0 0 0 0)))") "expected i8 literal")
(assert_malformed (module quote "(func (result v128) (i8x16.replace_lane -2.5 (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 1)))") "expected i8 literal")
(assert_malformed (module quote "(func (result v128) (i16x8.replace_lane nan (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 1)))") "expected i8 literal")
(assert_malformed (module quote "(func (result v128) (i32x4.replace_lane inf (v128.const i32x4 0 0 0 0) (i32.const 1)))") "expected i8 literal")
(assert_malformed (module quote "(func (result v128) (f32x4.replace_lane -inf (v128.const f32x4 0 0 0 0) (f32.const 1.1)))") "expected i8 literal")


;; Combination with each other

(module
  ;; as *.replace_lane's operand
  (func (export "i8x16_extract_lane_s") (param v128 v128) (result v128)
    (i8x16.replace_lane 0 (local.get 0) (i8x16.extract_lane_s 0 (local.get 1))))
  (func (export "i8x16_extract_lane_u") (param v128 v128) (result v128)
    (i8x16.replace_lane 0 (local.get 0) (i8x16.extract_lane_u 0 (local.get 1))))
  (func (export "i16x8_extract_lane_s") (param v128 v128) (result v128)
    (i16x8.replace_lane 0 (local.get 0) (i16x8.extract_lane_s 0 (local.get 1))))
  (func (export "i16x8_extract_lane_u") (param v128 v128) (result v128)
    (i16x8.replace_lane 0 (local.get 0) (i16x8.extract_lane_u 0 (local.get 1))))
  (func (export "i32x4_extract_lane") (param v128 v128) (result v128)
    (i32x4.replace_lane 0 (local.get 0) (i32x4.extract_lane 0 (local.get 1))))
  (func (export "f32x4_extract_lane") (param v128 v128) (result v128)
    (i32x4.replace_lane 0 (local.get 0) (i32x4.extract_lane 0 (local.get 1))))

  ;; as *.extract_lane's operand
  (func (export "i8x16_replace_lane-s") (param v128 i32) (result i32)
    (i8x16.extract_lane_s 15 (i8x16.replace_lane 15 (local.get 0) (local.get 1))))
  (func (export "i8x16_replace_lane-u") (param v128 i32) (result i32)
    (i8x16.extract_lane_u 15 (i8x16.replace_lane 15 (local.get 0) (local.get 1))))
  (func (export "i16x8_replace_lane-s") (param v128 i32) (result i32)
    (i16x8.extract_lane_s 7 (i16x8.replace_lane 7 (local.get 0) (local.get 1))))
  (func (export "i16x8_replace_lane-u") (param v128 i32) (result i32)
    (i16x8.extract_lane_u 7 (i16x8.replace_lane 7 (local.get 0) (local.get 1))))
  (func (export "i32x4_replace_lane") (param v128 i32) (result i32)
    (i32x4.extract_lane 3 (i32x4.replace_lane 3 (local.get 0) (local.get 1))))
  (func (export "f32x4_replace_lane") (param v128 f32) (result f32)
    (f32x4.extract_lane 3 (f32x4.replace_lane 3 (local.get 0) (local.get 1))))
)

(assert_return (invoke "i8x16_extract_lane_s" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (v128.const i8x16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1)) (v128.const i8x16 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "i8x16_extract_lane_u" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (v128.const i8x16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1)) (v128.const i8x16 255 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8_extract_lane_s" (v128.const i16x8 0 0 0 0 0 0 0 0) (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1)) (v128.const i16x8 -1 0 0 0 0 0 0 0))
(assert_return (invoke "i16x8_extract_lane_u" (v128.const i16x8 0 0 0 0 0 0 0 0) (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1)) (v128.const i16x8 65535 0 0 0 0 0 0 0))
(assert_return (invoke "i32x4_extract_lane" (v128.const i32x4 0 0 0 0) (v128.const i32x4 0x10000 -1 -1 -1)) (v128.const i32x4 65536 0 0 0))
(assert_return (invoke "f32x4_extract_lane" (v128.const f32x4 0 0 0 0) (v128.const f32x4 1e38 nan nan nan)) (v128.const f32x4 1e38 0 0 0))
(assert_return (invoke "i8x16_replace_lane-s" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 255)) (i32.const -1))
(assert_return (invoke "i8x16_replace_lane-u" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 255)) (i32.const 255))
(assert_return (invoke "i16x8_replace_lane-s" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 65535)) (i32.const -1))
(assert_return (invoke "i16x8_replace_lane-u" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 65535)) (i32.const 65535))
(assert_return (invoke "i32x4_replace_lane" (v128.const i32x4 0 0 0 0) (i32.const -1)) (i32.const -1))
(assert_return (invoke "f32x4_replace_lane" (v128.const f32x4 0 0 0 0) (f32.const 1.25)) (f32.const 1.25))

;; Combination with other SIMD instructions

(module
  ;; Constructing SIMD values
  (func (export "as-i8x16_splat-operand") (param v128) (result v128)
    (i8x16.splat (i8x16.extract_lane_s 0 (local.get 0))))
  (func (export "as-i16x8_splat-operand") (param v128) (result v128)
    (i16x8.splat (i16x8.extract_lane_u 0 (local.get 0))))
  (func (export "as-i32x4_splat-operand") (param v128) (result v128)
    (i32x4.splat (i32x4.extract_lane 0 (local.get 0))))
  (func (export "as-f32x4_splat-operand") (param v128) (result v128)
    (f32x4.splat (f32x4.extract_lane 0 (local.get 0))))

  ;; Integer arithmetic
  (func (export "as-i8x16_add-operands") (param v128 i32 v128 i32) (result v128)
    (i8x16.add (i8x16.replace_lane 0 (local.get 0) (local.get 1)) (i8x16.replace_lane 15 (local.get 2) (local.get 3))))
  (func (export "as-i16x8_add-operands") (param v128 i32 v128 i32) (result v128)
    (i16x8.add (i16x8.replace_lane 0 (local.get 0) (local.get 1)) (i16x8.replace_lane 7 (local.get 2) (local.get 3))))
  (func (export "as-i32x4_add-operands") (param v128 i32 v128 i32) (result v128)
    (i32x4.add (i32x4.replace_lane 0 (local.get 0) (local.get 1)) (i32x4.replace_lane 3 (local.get 2) (local.get 3))))        

  ;; Boolean horizontal reductions
  (func (export "as-i8x16_any_true-operand") (param v128 i32) (result i32)
    (i8x16.any_true (i8x16.replace_lane 0 (local.get 0) (local.get 1))))
  (func (export "as-i16x8_any_true-operand") (param v128 i32) (result i32)
    (i16x8.any_true (i16x8.replace_lane 0 (local.get 0) (local.get 1))))
  (func (export "as-i32x4_any_true-operand") (param v128 i32) (result i32)
    (i32x4.any_true (i32x4.replace_lane 0 (local.get 0) (local.get 1))))
)

(assert_return (invoke "as-i8x16_splat-operand" (v128.const i8x16 0xff 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (v128.const i8x16 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "as-i16x8_splat-operand" (v128.const i16x8 -1 -1 -1 -1 0 0 0 0)) (v128.const i16x8 -1 -1 -1 -1 -1 -1 -1 -1))
(assert_return (invoke "as-i32x4_splat-operand" (v128.const i32x4 0x10000 0 0 0)) (v128.const i32x4 65536 65536 65536 65536))
(assert_return (invoke "as-f32x4_splat-operand" (v128.const f32x4 3.14 nan nan nan)) (v128.const f32x4 3.14 3.14 3.14 3.14))
(assert_return (invoke "as-i8x16_add-operands"
  (v128.const i8x16 0xff 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16) (i32.const 1) 
  (v128.const i8x16 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 0xff) (i32.const 1))
  (v128.const i8x16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17)) 
(assert_return (invoke "as-i16x8_add-operands"
  (v128.const i16x8 -1 4 9 16 25 36 49 64) (i32.const 1)
  (v128.const i16x8 64 49 36 25 16 9 4 -1) (i32.const 1))
  (v128.const i16x8 65 53 45 41 41 45 53 65))
(assert_return (invoke "as-i32x4_add-operands"
  (v128.const i32x4 -1 8 27 64) (i32.const 1) (v128.const i32x4 64 27 8 -1) (i32.const 1)) (v128.const i32x4 65 35 35 65))

(assert_return (invoke "as-i8x16_any_true-operand" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-i16x8_any_true-operand" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 1)) (i32.const 1))
(assert_return (invoke "as-i32x4_any_true-operand" (v128.const i32x4 1 0 0 0) (i32.const 0)) (i32.const 0))

;; Load and store

(module
  (memory 1)
  (func (export "as-v128_store-operand-1") (param v128 i32) (result v128)
    (v128.store (i32.const 0) (i8x16.replace_lane 0 (local.get 0) (local.get 1)))
    (v128.load (i32.const 0)))
  (func (export "as-v128_store-operand-2") (param v128 i32) (result v128)
    (v128.store (i32.const 0) (i16x8.replace_lane 0 (local.get 0) (local.get 1)))
    (v128.load (i32.const 0)))
  (func (export "as-v128_store-operand-3") (param v128 i32) (result v128)
    (v128.store (i32.const 0) (i32x4.replace_lane 0 (local.get 0) (local.get 1)))
    (v128.load (i32.const 0)))
  (func (export "as-v128_store-operand-4") (param v128 f32) (result v128)
    (v128.store (i32.const 0) (f32x4.replace_lane 0 (local.get 0) (local.get 1)))
    (v128.load (i32.const 0)))
)

(assert_return (invoke "as-v128_store-operand-1" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (i32.const 1)) (v128.const i8x16 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0))
(assert_return (invoke "as-v128_store-operand-2" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 256)) (v128.const i16x8 0x100 0 0 0 0 0 0 0))
(assert_return (invoke "as-v128_store-operand-3" (v128.const i32x4 0 0 0 0)(i32.const 0xffffffff)) (v128.const i32x4 -1 0 0 0))
(assert_return (invoke "as-v128_store-operand-4" (v128.const f32x4 0 0 0 0)(f32.const 3.14)) (v128.const f32x4 3.14 0 0 0))

;; As the argument of wasm core ops

(module
  (global $g (mut v128) (v128.const f32x4 0.0 0.0 0.0 0.0))
  (func (export "as-if-condition-value") (param v128) (result i32)
    (if (result i32) (i8x16.extract_lane_s 0 (local.get 0)) (then (i32.const 0xff)) (else (i32.const 0))))
  (func (export "as-return-value") (param v128 i32) (result v128)
    (return (i16x8.replace_lane 0 (local.get 0) (local.get 1))))
  (func (export "as-local_set-value") (param v128) (result i32) (local i32)
    (local.set 1 (i32x4.extract_lane 0 (local.get 0)))
    (return (local.get 1)))
  (func (export "as-global_set-value") (param v128 f32) (result v128)
    (global.set $g (f32x4.replace_lane 0 (local.get 0) (local.get 1)))
    (return (global.get $g)))
)

(assert_return (invoke "as-if-condition-value" (v128.const i8x16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)) (i32.const 0))
(assert_return (invoke "as-return-value" (v128.const i16x8 0 0 0 0 0 0 0 0) (i32.const 1)) (v128.const i16x8 1 0 0 0 0 0 0 0))
(assert_return (invoke "as-local_set-value" (v128.const i32x4 -1 -1 -1 -1)) (i32.const -1))
(assert_return (invoke "as-global_set-value" (v128.const f32x4 0 0 0 0)(f32.const 3.14)) (v128.const f32x4 3.14 0 0 0))
